/******************************************************************************
 *  Name:      Michael Dey
 *  NetID:     CSIS 2420-004
 *  Precept:   SP-17
 *
 *  Partner Name:    Chad Seale   
 *  Partner NetID:   CSIS 2420-004   
 *  Partner Precept: SP-17
 *
 *  Hours to complete assignment (optional):
 *
 ******************************************************************************/


/******************************************************************************
 *  Explain briefly how you implemented the board data type.
 *****************************************************************************/
Board takes in a 2 dimensional array of numbers which is meant to represent the position of tiles in the puzzle.
Public methods:
	size() - returns the size of the array 
	hamming() - calculates the number of blocks out of place
	manhattan() - sum of all the distances of out of place blocks to their respective goal positions
	isGoal() - returns true if the puzzle is in the solved state, false if not
	isSolvable() - calculates if the given board is solvable and returns true if it is solvable, false if not
	equals() -	takes in a board to compare, then compares the toString() values, if they are equal, the boards are equal
	neighbors() - creates boards that represent the (up to) 4 possible moves and returns them as an iterator
	toString() - this was given to us in the assignment; it prints out the size of puzzle, and the position of each tile

/******************************************************************************
 *  Explain briefly how you represented a search node
 *  (board + number of moves + previous search node).
 *****************************************************************************/

I created a search node named MoveBoard creating it as a private class inside solver seemed like the best way to go about it.  
It took in a board, moves to get that board, and a mainBoard. It contains the mainBoard so that can be used to follow 
the moves to solve the board also keeps track of it so it doesn't get moved back to the queue.





/******************************************************************************
 *  Explain briefly how you detected unsolvable puzzles. What is the
 *  order of growth of the runtime of your isSolvable() method?
 *****************************************************************************/

Description:
I used this formula:
	Calculate # of inversions
	Calculate if #inversions is even or odd
	Calculate if size of board is even or odd
	Calculate the row of "0" tile
	odd size board && odd number of inversions == not solvable
 	odd size board && even number of inversion == solvable
	even size board: Sum of (blank ROW location of 0) + number of inversions == EVEN Number:  not solvable
	even size board: Sum of (blank ROW location of 0) + number of inversions == ODD Number: solvable
	

Order of growth of running time:
	The inversion calculator runs in O(n^2) time


/******************************************************************************
 *  For each of the following instances, give the minimal number of 
 *  moves to reach the goal state. Also give the amount of time
 *  it takes the A* heuristic with the Hamming and Manhattan
 *  priority functions to find the solution. If it can't find the
 *  solution in a reasonable amount of time (say, 5 minutes) or memory,
 *  indicate that instead. Note that you may be able to solve
 *  puzzlexx.txt even if you can't solve puzzleyy.txt even if xx > yy.
 *****************************************************************************/


                  number of          seconds
     instance       moves      Hamming     Manhattan
   ------------  ----------   ----------   ----------
   puzzle28.txt      28			.55			.54			
   puzzle30.txt      30			.96			.94			
   puzzle32.txt      32			9.22		9.34		
   puzzle34.txt      34			3.84		4.00	
   puzzle36.txt      36        43.95		45.22		
   puzzle38.txt      38        23.94		23.41		
   puzzle40.txt      40         7.34		7.54	
   puzzle42.txt      42        39.62		38.03		



/******************************************************************************
 *  If you wanted to solve random 4-by-4 or 5-by-5 puzzles, which
 *  would you prefer:  a faster computer (say, 2x as fast), more memory
 *  (say 2x as much), a better priority queue (say, 2x as fast),
 *  or a better priority function (say, one on the order of improvement
 *  from Hamming to Manhattan)? Why?
 *****************************************************************************/
I would take a better priority queue.  I know we are solving a smaller puzzle, but this
is the major algorithm that will speed up the functionality in large numbers.  As we've
learned, a fast algorithm can often beat a faster processor.



/******************************************************************************
 *  Known bugs / limitations.
 *****************************************************************************/
We are sending Board an array that is supposed to be N by N in size.  If what is sent
is NOT consistently N by N it will still be treated like an N by N board. 

The inversion calculator runs in O(n^2) time.

public Iterator<Board> iterator()  is public because I can't reduce the visibility of an inherited method

Also memory seems to be a large limitation.

/******************************************************************************
 *  Describe whatever help (if any) that you received.
 *  Don't include readings, lectures, and precepts, but do
 *  include any help from people (including course staff, lab TAs,
 *  classmates, and friends) and attribute them by name.
 *****************************************************************************/

None



/******************************************************************************
 *  Describe any serious problems you encountered.                    
 *****************************************************************************/
My biggest problem was understanding how to return an Iterator in a format that
Solver was expecting.  -Mike

Mine was figuring out Minpq and how to implement properly to solve the boards. -Chad

/******************************************************************************
 *  If you worked with a partner, assert below that you followed
 *  the protocol as described on the assignment page. Give one
 *  sentence explaining what each of you contributed.
 *****************************************************************************/
Mike Dey wrote the majority of Board.java, and BoardTest.java
Chad Seale wrote Solver.java



/******************************************************************************
 *  List any other comments here. Feel free to provide any feedback   
 *  on how much you learned from doing the assignment, and whether    
 *  you enjoyed doing it.                                             
 *****************************************************************************/
